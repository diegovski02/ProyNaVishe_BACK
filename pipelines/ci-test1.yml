trigger:
  - Test1

variables:
  - group: GitHubSecrets

pool:
  name: 'Default'

steps:
# Paso 1: Verificar el agente
- script: echo 'Verificando agente disponible...'
  displayName: 'Verificar Agente'

# Paso 2: Validar código y pruebas con Maven (opcional si usas Java)
# - script: mvn clean verify
#   displayName: 'Validar código y ejecutar pruebas'
#   workingDirectory: '$(System.DefaultWorkingDirectory)'

# Paso 3: Publicar resultados de pruebas
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(System.DefaultWorkingDirectory)/target/surefire-reports/TEST-*.xml'
    testRunTitle: 'Resultados de Pruebas Backend'

# Paso 4: Instalar .NET SDK (necesario para análisis DevSecOps)
- task: UseDotNet@2
  displayName: 'Instalar .NET SDK 8'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Paso 5: Limpieza de archivos peligrosos antes del análisis
- script: |
    echo "Eliminando archivos potencialmente sospechosos..."
    del /S /Q *.exe *.dll *.zip *.rar *.bin *.tmp || echo "No se encontraron archivos a eliminar"
  displayName: 'Limpieza previa al análisis DevSecOps'

# Paso 6: Análisis de Seguridad DevSecOps
- task: MicrosoftSecurityDevOps@1
  displayName: 'Análisis de Seguridad DevSecOps'

# Paso 7: Push automático a GitHub desde Azure (solo si estás en rama Test1)
- script: |
    echo "Configurando Git..."
    git config --global user.email "dvegacajas2@gmail.com"
    git config --global user.name "Diego Vega"

    echo "Clonando desde GitHub..."
    git clone https://$(GITHUB_TOKEN)@github.com/diegovski02/ProyNaVishe_BACK.git repo-tmp
    cd repo-tmp

    echo "Haciendo pull con rebase para evitar conflictos..."
    git pull origin $(Build.SourceBranchName) --rebase

    echo "Agregando remoto Azure si no existe..."
    git remote add azure $(Build.Repository.Uri) || echo "Ya existe remoto Azure"

    echo "Haciendo pull desde Azure con rebase..."
    git pull azure $(Build.SourceBranchName) --rebase

    echo "Realizando push final a GitHub..."
    git push origin HEAD:$(Build.SourceBranchName)
  displayName: "Push automático a GitHub desde Azure (sin conflictos)"
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'Test1'))
