trigger:
  - Test1

variables:
  - group: GitHubSecrets

pool:
  name: 'Default'

steps:
# Paso 1: Verificar el agente
- script: echo Verificando agente disponible...
  displayName: 'Verificar Agente'

# Paso 2: Validar código y pruebas con Maven
# - script: mvn clean verify
#   displayName: 'Validar código y ejecutar pruebas'
#   workingDirectory: '$(System.DefaultWorkingDirectory)'

# Paso 3: Publicar resultados de pruebas
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(System.DefaultWorkingDirectory)/target/surefire-reports/TEST-*.xml'
    testRunTitle: 'Resultados de Pruebas Backend'

# Paso 4: Instalar .NET SDK (necesario para MicrosoftSecurityDevOps)
- task: UseDotNet@2
  displayName: 'Instalar .NET SDK 8'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Paso 5: Análisis de Seguridad DevSecOps
- task: MicrosoftSecurityDevOps@1
  displayName: 'Análisis de Seguridad DevSecOps'

# Paso 6: Push automático a GitHub desde Azure (sin conflictos)
- script: |
    echo Configurando credenciales Git...
    git config --global user.email "dvegacajas2@gmail.com"
    git config --global user.name "Diego Vega"

    echo Clonando repositorio desde GitHub...
    git clone https://$(GITHUB_TOKEN)@github.com/diegovski02/ProyNaVishe_BACK.git repo-tmp
    cd repo-tmp

    echo Realizando pull desde GitHub (con rebase)...
    git pull origin $(Build.SourceBranchName) --rebase

    echo Verificando o agregando conexión con Azure Repo...
    git remote add azure $(Build.Repository.Uri) || echo "Remote ya existe"
    git pull azure $(Build.SourceBranchName) --rebase

    echo Push final hacia GitHub...
    git push origin HEAD:$(Build.SourceBranchName)
  displayName: "Push automático a GitHub desde Azure (sin conflictos)"
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'Test1'))
