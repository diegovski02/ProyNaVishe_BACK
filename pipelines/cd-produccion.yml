trigger:
  - Produccion

variables:
  - group: GitHubSecrets

pool:
  name: 'Default'

steps:
# Paso 1: Verificar el agente
- script: echo Iniciando Deploy a Producción...
  displayName: 'Verificar Agente'

# Paso 2: Despliegue (personalizable)
# Aquí puedes poner AzureWebApp o cualquier otra acción de despliegue real.
# - task: AzureWebApp@1
#   inputs:
#     azureSubscription: '<NOMBRE-CONEXIÓN-SERVICIO>'
#     appName: '<NOMBRE-WEBAPP>'
#     package: '$(System.DefaultWorkingDirectory)/**/*.zip'
#   displayName: 'Desplegar a Producción'

# Paso 3: Notificación de despliegue
- script: echo "🚀 Despliegue completado en Producción"
  displayName: 'Finalización del Deploy'

# Paso 4: Push forzado desde Azure a GitHub (Producción limpio)
- script: |
    echo "🔁 Configurando Git..."
    git config --global user.email "dvegacajas2@gmail.com"
    git config --global user.name "Diego Vega"

    echo "📦 Clonando solo la rama Produccion desde GitHub..."
    git clone --branch Produccion https://$(GITHUB_TOKEN)@github.com/diegovski02/ProyNaVishe_BACK.git repo-tmp

    echo "🧹 Limpiando el contenido viejo en GitHub..."
    cd repo-tmp
    git rm -r *  # elimina todo lo viejo en GitHub (de la rama Produccion)

    echo "📂 Copiando el contenido actual de Azure DevOps (ya autenticado)..."
    xcopy /E /Y "$(Build.SourcesDirectory)\*" .\

    echo "📌 Commit de sincronización"
    git add .
    git commit -m "🎯 Sincronización desde Azure DevOps (Producción)"

    echo "🚀 Push forzado a GitHub"
    git push origin Produccion --force
  displayName: "Push forzado desde Azure a GitHub (Producción limpio)"
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'Produccion'))


