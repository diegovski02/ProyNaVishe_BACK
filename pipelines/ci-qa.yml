trigger:
  - QA

variables:
  - group: GitHubSecrets

pool:
  name: 'Default'

steps:
# Paso 1: Verificar el agente
- script: echo Verificando agente disponible...
  displayName: 'Verificar Agente'

# Paso 2: Validar código y pruebas (opcional, puedes activarlo si usas Maven)
# - script: mvn clean verify
#   displayName: 'Ejecutar pruebas en QA'
#   workingDirectory: '$(System.DefaultWorkingDirectory)'

# Paso 3: Publicar resultados de pruebas
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(System.DefaultWorkingDirectory)/target/surefire-reports/TEST-*.xml'
    testRunTitle: 'Resultados QA - Backend'

# Paso 4: Instalar .NET SDK (para MicrosoftSecurityDevOps)
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.201'
  displayName: 'Instalar .NET SDK'

# Paso 5: Limpieza de archivos sospechosos antes del análisis (AntiMalware)
- script: |
    echo "Eliminando archivos potencialmente conflictivos..."
    del *.exe /s /q || echo "No hay archivos .exe"
    del *.zip /s /q || echo "No hay archivos .zip"
  displayName: 'Limpieza previa al análisis DevSecOps'

# Paso 6: Análisis de seguridad DevSecOps
- task: MicrosoftSecurityDevOps@1
  displayName: 'Análisis de Seguridad QA'

# Paso 7: Push automático a GitHub desde Azure (sin errores de rebase)
- script: |
    git config --global user.email "dvegacajas2@gmail.com"
    git config --global user.name "Diego Vega"

    rem Clona el repo desde GitHub con token
    git clone https://$(GITHUB_TOKEN)@github.com/diegovski02/ProyNaVishe_BACK.git repo-tmp
    cd repo-tmp

    rem Trae últimos cambios en la misma rama
    git pull origin $(Build.SourceBranchName) --rebase

    rem Añade el repo de Azure (por si no existe)
    git remote add azure $(Build.Repository.Uri) || echo "Remote ya existe"
    git pull azure $(Build.SourceBranchName) --rebase

    rem Realiza el push final desde Azure a GitHub
    git push origin HEAD:$(Build.SourceBranchName)
  displayName: 'Push automático a GitHub desde Azure (QA)'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'QA'))
